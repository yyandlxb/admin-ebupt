/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.DriverRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Driver extends TableImpl<DriverRecord> {

    private static final long serialVersionUID = -1502586311;

    /**
     * The reference instance of <code>st.driver</code>
     */
    public static final Driver DRIVER = new Driver();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DriverRecord> getRecordType() {
        return DriverRecord.class;
    }

    /**
     * The column <code>st.driver.id</code>.
     */
    public final TableField<DriverRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.driver.driver_name</code>.
     */
    public final TableField<DriverRecord, String> DRIVER_NAME = createField("driver_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.driver.driver_phone</code>.
     */
    public final TableField<DriverRecord, String> DRIVER_PHONE = createField("driver_phone", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.driver.plate_number</code>. 车牌号
     */
    public final TableField<DriverRecord, String> PLATE_NUMBER = createField("plate_number", org.jooq.impl.SQLDataType.VARCHAR(255), this, "车牌号");

    /**
     * The column <code>st.driver.work_status</code>. 1：未出车 2：出车
     */
    public final TableField<DriverRecord, Integer> WORK_STATUS = createField("work_status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "1：未出车 2：出车");

    /**
     * The column <code>st.driver.driver_status</code>. 0：正常 1：删除
     */
    public final TableField<DriverRecord, Integer> DRIVER_STATUS = createField("driver_status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "0：正常 1：删除");

    /**
     * The column <code>st.driver.create_time</code>.
     */
    public final TableField<DriverRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>st.driver.order_num</code>. 订单数
     */
    public final TableField<DriverRecord, Integer> ORDER_NUM = createField("order_num", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "订单数");

    /**
     * The column <code>st.driver.goods_num</code>. 商品数
     */
    public final TableField<DriverRecord, Integer> GOODS_NUM = createField("goods_num", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "商品数");

    /**
     * The column <code>st.driver.total_price</code>. 运费
     */
    public final TableField<DriverRecord, BigDecimal> TOTAL_PRICE = createField("total_price", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "运费");

    /**
     * The column <code>st.driver.business_id</code>. 托运部id
     */
    public final TableField<DriverRecord, Integer> BUSINESS_ID = createField("business_id", org.jooq.impl.SQLDataType.INTEGER, this, "托运部id");

    /**
     * Create a <code>st.driver</code> table reference
     */
    public Driver() {
        this(DSL.name("driver"), null);
    }

    /**
     * Create an aliased <code>st.driver</code> table reference
     */
    public Driver(String alias) {
        this(DSL.name(alias), DRIVER);
    }

    /**
     * Create an aliased <code>st.driver</code> table reference
     */
    public Driver(Name alias) {
        this(alias, DRIVER);
    }

    private Driver(Name alias, Table<DriverRecord> aliased) {
        this(alias, aliased, null);
    }

    private Driver(Name alias, Table<DriverRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DRIVER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DriverRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DRIVER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DriverRecord> getPrimaryKey() {
        return Keys.KEY_DRIVER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DriverRecord>> getKeys() {
        return Arrays.<UniqueKey<DriverRecord>>asList(Keys.KEY_DRIVER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Driver as(String alias) {
        return new Driver(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Driver as(Name alias) {
        return new Driver(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Driver rename(String name) {
        return new Driver(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Driver rename(Name name) {
        return new Driver(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.TBackstageOperationRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 后台操作记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TBackstageOperationRecord extends TableImpl<TBackstageOperationRecordRecord> {

    private static final long serialVersionUID = 1662064227;

    /**
     * The reference instance of <code>st.t_backstage_operation_record</code>
     */
    public static final TBackstageOperationRecord T_BACKSTAGE_OPERATION_RECORD = new TBackstageOperationRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TBackstageOperationRecordRecord> getRecordType() {
        return TBackstageOperationRecordRecord.class;
    }

    /**
     * The column <code>st.t_backstage_operation_record.id</code>.
     */
    public final TableField<TBackstageOperationRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.t_backstage_operation_record.user_id</code>. 关联t_backstage_user表USERID
     */
    public final TableField<TBackstageOperationRecordRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "关联t_backstage_user表USERID");

    /**
     * The column <code>st.t_backstage_operation_record.create_time</code>. 创建时间
     */
    public final TableField<TBackstageOperationRecordRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>st.t_backstage_operation_record.operation_content</code>. 操作类容
     */
    public final TableField<TBackstageOperationRecordRecord, String> OPERATION_CONTENT = createField("operation_content", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "操作类容");

    /**
     * The column <code>st.t_backstage_operation_record.phone</code>. 手机号
     */
    public final TableField<TBackstageOperationRecordRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.CHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "手机号");

    /**
     * The column <code>st.t_backstage_operation_record.order_code</code>. 订单号
     */
    public final TableField<TBackstageOperationRecordRecord, String> ORDER_CODE = createField("order_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "订单号");

    /**
     * The column <code>st.t_backstage_operation_record.flag</code>. 1：改变了目的地，2：改变了价格，3：改变了异常信息，4:进行办票，5，支付记录,6:打印次数7、拆包
     */
    public final TableField<TBackstageOperationRecordRecord, String> FLAG = createField("flag", org.jooq.impl.SQLDataType.VARCHAR(2), this, "1：改变了目的地，2：改变了价格，3：改变了异常信息，4:进行办票，5，支付记录,6:打印次数7、拆包");

    /**
     * Create a <code>st.t_backstage_operation_record</code> table reference
     */
    public TBackstageOperationRecord() {
        this(DSL.name("t_backstage_operation_record"), null);
    }

    /**
     * Create an aliased <code>st.t_backstage_operation_record</code> table reference
     */
    public TBackstageOperationRecord(String alias) {
        this(DSL.name(alias), T_BACKSTAGE_OPERATION_RECORD);
    }

    /**
     * Create an aliased <code>st.t_backstage_operation_record</code> table reference
     */
    public TBackstageOperationRecord(Name alias) {
        this(alias, T_BACKSTAGE_OPERATION_RECORD);
    }

    private TBackstageOperationRecord(Name alias, Table<TBackstageOperationRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private TBackstageOperationRecord(Name alias, Table<TBackstageOperationRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "后台操作记录表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_BACKSTAGE_OPERATION_RECORD_IDX_ORDER_CODE, Indexes.T_BACKSTAGE_OPERATION_RECORD_INX_USER_ID, Indexes.T_BACKSTAGE_OPERATION_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TBackstageOperationRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_BACKSTAGE_OPERATION_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TBackstageOperationRecordRecord> getPrimaryKey() {
        return Keys.KEY_T_BACKSTAGE_OPERATION_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TBackstageOperationRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<TBackstageOperationRecordRecord>>asList(Keys.KEY_T_BACKSTAGE_OPERATION_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TBackstageOperationRecord as(String alias) {
        return new TBackstageOperationRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TBackstageOperationRecord as(Name alias) {
        return new TBackstageOperationRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TBackstageOperationRecord rename(String name) {
        return new TBackstageOperationRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TBackstageOperationRecord rename(Name name) {
        return new TBackstageOperationRecord(name, null);
    }
}

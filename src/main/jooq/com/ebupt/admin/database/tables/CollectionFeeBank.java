/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.CollectionFeeBankRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CollectionFeeBank extends TableImpl<CollectionFeeBankRecord> {

    private static final long serialVersionUID = 1399039005;

    /**
     * The reference instance of <code>st.collection_fee_bank</code>
     */
    public static final CollectionFeeBank COLLECTION_FEE_BANK = new CollectionFeeBank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollectionFeeBankRecord> getRecordType() {
        return CollectionFeeBankRecord.class;
    }

    /**
     * The column <code>st.collection_fee_bank.id</code>.
     */
    public final TableField<CollectionFeeBankRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.collection_fee_bank.user_name</code>. 收款人姓名
     */
    public final TableField<CollectionFeeBankRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "收款人姓名");

    /**
     * The column <code>st.collection_fee_bank.identity_card</code>. 身份证
     */
    public final TableField<CollectionFeeBankRecord, String> IDENTITY_CARD = createField("identity_card", org.jooq.impl.SQLDataType.VARCHAR(20), this, "身份证");

    /**
     * The column <code>st.collection_fee_bank.phone</code>.
     */
    public final TableField<CollectionFeeBankRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>st.collection_fee_bank.collection_fee_bank_name</code>. 户行开名称
     */
    public final TableField<CollectionFeeBankRecord, String> COLLECTION_FEE_BANK_NAME = createField("collection_fee_bank_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "户行开名称");

    /**
     * The column <code>st.collection_fee_bank.collection_fee_bank_num</code>.
     */
    public final TableField<CollectionFeeBankRecord, String> COLLECTION_FEE_BANK_NUM = createField("collection_fee_bank_num", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>st.collection_fee_bank.collection_fee_bank_code</code>. 开户行代号
     */
    public final TableField<CollectionFeeBankRecord, String> COLLECTION_FEE_BANK_CODE = createField("collection_fee_bank_code", org.jooq.impl.SQLDataType.VARCHAR(20), this, "开户行代号");

    /**
     * The column <code>st.collection_fee_bank.collection_fee_bank_branch_name</code>. 开户分行名称
     */
    public final TableField<CollectionFeeBankRecord, String> COLLECTION_FEE_BANK_BRANCH_NAME = createField("collection_fee_bank_branch_name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "开户分行名称");

    /**
     * The column <code>st.collection_fee_bank.collection_fee_bank_branch_code</code>. 开户分行代码
     */
    public final TableField<CollectionFeeBankRecord, String> COLLECTION_FEE_BANK_BRANCH_CODE = createField("collection_fee_bank_branch_code", org.jooq.impl.SQLDataType.VARCHAR(20), this, "开户分行代码");

    /**
     * The column <code>st.collection_fee_bank.collection_fee_bank_province</code>. 省份
     */
    public final TableField<CollectionFeeBankRecord, String> COLLECTION_FEE_BANK_PROVINCE = createField("collection_fee_bank_province", org.jooq.impl.SQLDataType.VARCHAR(20), this, "省份");

    /**
     * The column <code>st.collection_fee_bank.collection_fee_bank_province_name</code>.
     */
    public final TableField<CollectionFeeBankRecord, String> COLLECTION_FEE_BANK_PROVINCE_NAME = createField("collection_fee_bank_province_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>st.collection_fee_bank.created_at</code>.
     */
    public final TableField<CollectionFeeBankRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.collection_fee_bank.updated_at</code>.
     */
    public final TableField<CollectionFeeBankRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>st.collection_fee_bank</code> table reference
     */
    public CollectionFeeBank() {
        this(DSL.name("collection_fee_bank"), null);
    }

    /**
     * Create an aliased <code>st.collection_fee_bank</code> table reference
     */
    public CollectionFeeBank(String alias) {
        this(DSL.name(alias), COLLECTION_FEE_BANK);
    }

    /**
     * Create an aliased <code>st.collection_fee_bank</code> table reference
     */
    public CollectionFeeBank(Name alias) {
        this(alias, COLLECTION_FEE_BANK);
    }

    private CollectionFeeBank(Name alias, Table<CollectionFeeBankRecord> aliased) {
        this(alias, aliased, null);
    }

    private CollectionFeeBank(Name alias, Table<CollectionFeeBankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COLLECTION_FEE_BANK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CollectionFeeBankRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COLLECTION_FEE_BANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CollectionFeeBankRecord> getPrimaryKey() {
        return Keys.KEY_COLLECTION_FEE_BANK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CollectionFeeBankRecord>> getKeys() {
        return Arrays.<UniqueKey<CollectionFeeBankRecord>>asList(Keys.KEY_COLLECTION_FEE_BANK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CollectionFeeBank as(String alias) {
        return new CollectionFeeBank(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CollectionFeeBank as(Name alias) {
        return new CollectionFeeBank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionFeeBank rename(String name) {
        return new CollectionFeeBank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionFeeBank rename(Name name) {
        return new CollectionFeeBank(name, null);
    }
}

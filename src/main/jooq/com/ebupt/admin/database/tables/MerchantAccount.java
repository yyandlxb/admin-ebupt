/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.MerchantAccountRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 商户运费贷账户
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MerchantAccount extends TableImpl<MerchantAccountRecord> {

    private static final long serialVersionUID = -1295815079;

    /**
     * The reference instance of <code>st.merchant_account</code>
     */
    public static final MerchantAccount MERCHANT_ACCOUNT = new MerchantAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MerchantAccountRecord> getRecordType() {
        return MerchantAccountRecord.class;
    }

    /**
     * The column <code>st.merchant_account.id</code>.
     */
    public final TableField<MerchantAccountRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>st.merchant_account.balance</code>. 账户余额
     */
    public final TableField<MerchantAccountRecord, Integer> BALANCE = createField("balance", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "账户余额");

    /**
     * The column <code>st.merchant_account.overdue_debt</code>. 逾期欠款
     */
    public final TableField<MerchantAccountRecord, Integer> OVERDUE_DEBT = createField("overdue_debt", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "逾期欠款");

    /**
     * The column <code>st.merchant_account.interest</code>. 利息
     */
    public final TableField<MerchantAccountRecord, Integer> INTEREST = createField("interest", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "利息");

    /**
     * The column <code>st.merchant_account.contract</code>. 合同地址
     */
    public final TableField<MerchantAccountRecord, String> CONTRACT = createField("contract", org.jooq.impl.SQLDataType.VARCHAR(100), this, "合同地址");

    /**
     * The column <code>st.merchant_account.enabled</code>.
     */
    public final TableField<MerchantAccountRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>st.merchant_account.due_date</code>. 本期还款日
     */
    public final TableField<MerchantAccountRecord, Date> DUE_DATE = createField("due_date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "本期还款日");

    /**
     * The column <code>st.merchant_account.last_interest_time</code>. 上次核算利息时间
     */
    public final TableField<MerchantAccountRecord, Timestamp> LAST_INTEREST_TIME = createField("last_interest_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "上次核算利息时间");

    /**
     * The column <code>st.merchant_account.created_at</code>.
     */
    public final TableField<MerchantAccountRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.merchant_account.updated_at</code>.
     */
    public final TableField<MerchantAccountRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>st.merchant_account</code> table reference
     */
    public MerchantAccount() {
        this(DSL.name("merchant_account"), null);
    }

    /**
     * Create an aliased <code>st.merchant_account</code> table reference
     */
    public MerchantAccount(String alias) {
        this(DSL.name(alias), MERCHANT_ACCOUNT);
    }

    /**
     * Create an aliased <code>st.merchant_account</code> table reference
     */
    public MerchantAccount(Name alias) {
        this(alias, MERCHANT_ACCOUNT);
    }

    private MerchantAccount(Name alias, Table<MerchantAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private MerchantAccount(Name alias, Table<MerchantAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "商户运费贷账户");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MERCHANT_ACCOUNT_LAST_INTEREST_TIME, Indexes.MERCHANT_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MerchantAccountRecord> getPrimaryKey() {
        return Keys.KEY_MERCHANT_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MerchantAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<MerchantAccountRecord>>asList(Keys.KEY_MERCHANT_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MerchantAccount as(String alias) {
        return new MerchantAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MerchantAccount as(Name alias) {
        return new MerchantAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MerchantAccount rename(String name) {
        return new MerchantAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MerchantAccount rename(Name name) {
        return new MerchantAccount(name, null);
    }
}

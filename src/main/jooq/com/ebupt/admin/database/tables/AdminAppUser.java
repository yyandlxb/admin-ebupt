/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.AdminAppUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminAppUser extends TableImpl<AdminAppUserRecord> {

    private static final long serialVersionUID = -861205606;

    /**
     * The reference instance of <code>st.admin_app_user</code>
     */
    public static final AdminAppUser ADMIN_APP_USER = new AdminAppUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminAppUserRecord> getRecordType() {
        return AdminAppUserRecord.class;
    }

    /**
     * The column <code>st.admin_app_user.id</code>. 用户id
     */
    public final TableField<AdminAppUserRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "用户id");

    /**
     * The column <code>st.admin_app_user.phone</code>.
     */
    public final TableField<AdminAppUserRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>st.admin_app_user.name</code>. 用户名称
     */
    public final TableField<AdminAppUserRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "用户名称");

    /**
     * The column <code>st.admin_app_user.password</code>. 用户密码
     */
    public final TableField<AdminAppUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "用户密码");

    /**
     * The column <code>st.admin_app_user.enabled</code>. 是否可用
     */
    public final TableField<AdminAppUserRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "是否可用");

    /**
     * The column <code>st.admin_app_user.created_at</code>.
     */
    public final TableField<AdminAppUserRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.admin_app_user.updated_at</code>.
     */
    public final TableField<AdminAppUserRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>st.admin_app_user</code> table reference
     */
    public AdminAppUser() {
        this(DSL.name("admin_app_user"), null);
    }

    /**
     * Create an aliased <code>st.admin_app_user</code> table reference
     */
    public AdminAppUser(String alias) {
        this(DSL.name(alias), ADMIN_APP_USER);
    }

    /**
     * Create an aliased <code>st.admin_app_user</code> table reference
     */
    public AdminAppUser(Name alias) {
        this(alias, ADMIN_APP_USER);
    }

    private AdminAppUser(Name alias, Table<AdminAppUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminAppUser(Name alias, Table<AdminAppUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_APP_USER_PRIMARY, Indexes.ADMIN_APP_USER_UK_PHONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AdminAppUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ADMIN_APP_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdminAppUserRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_APP_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdminAppUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminAppUserRecord>>asList(Keys.KEY_ADMIN_APP_USER_PRIMARY, Keys.KEY_ADMIN_APP_USER_UK_PHONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminAppUser as(String alias) {
        return new AdminAppUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminAppUser as(Name alias) {
        return new AdminAppUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminAppUser rename(String name) {
        return new AdminAppUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminAppUser rename(Name name) {
        return new AdminAppUser(name, null);
    }
}

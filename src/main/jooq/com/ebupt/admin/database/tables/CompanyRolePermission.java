/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.CompanyRolePermissionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyRolePermission extends TableImpl<CompanyRolePermissionRecord> {

    private static final long serialVersionUID = 789175812;

    /**
     * The reference instance of <code>st.company_role_permission</code>
     */
    public static final CompanyRolePermission COMPANY_ROLE_PERMISSION = new CompanyRolePermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRolePermissionRecord> getRecordType() {
        return CompanyRolePermissionRecord.class;
    }

    /**
     * The column <code>st.company_role_permission.id</code>.
     */
    public final TableField<CompanyRolePermissionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.company_role_permission.role_id</code>. 用户ID
     */
    public final TableField<CompanyRolePermissionRecord, Integer> ROLE_ID = createField("role_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户ID");

    /**
     * The column <code>st.company_role_permission.permission_id</code>. 权限ID
     */
    public final TableField<CompanyRolePermissionRecord, Integer> PERMISSION_ID = createField("permission_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "权限ID");

    /**
     * The column <code>st.company_role_permission.enabled</code>. 是否存在标志位
     */
    public final TableField<CompanyRolePermissionRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "是否存在标志位");

    /**
     * The column <code>st.company_role_permission.created_at</code>.
     */
    public final TableField<CompanyRolePermissionRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.company_role_permission.updated_at</code>.
     */
    public final TableField<CompanyRolePermissionRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>st.company_role_permission</code> table reference
     */
    public CompanyRolePermission() {
        this(DSL.name("company_role_permission"), null);
    }

    /**
     * Create an aliased <code>st.company_role_permission</code> table reference
     */
    public CompanyRolePermission(String alias) {
        this(DSL.name(alias), COMPANY_ROLE_PERMISSION);
    }

    /**
     * Create an aliased <code>st.company_role_permission</code> table reference
     */
    public CompanyRolePermission(Name alias) {
        this(alias, COMPANY_ROLE_PERMISSION);
    }

    private CompanyRolePermission(Name alias, Table<CompanyRolePermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyRolePermission(Name alias, Table<CompanyRolePermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_ROLE_PERMISSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompanyRolePermissionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY_ROLE_PERMISSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompanyRolePermissionRecord> getPrimaryKey() {
        return Keys.KEY_COMPANY_ROLE_PERMISSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompanyRolePermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyRolePermissionRecord>>asList(Keys.KEY_COMPANY_ROLE_PERMISSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRolePermission as(String alias) {
        return new CompanyRolePermission(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRolePermission as(Name alias) {
        return new CompanyRolePermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyRolePermission rename(String name) {
        return new CompanyRolePermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyRolePermission rename(Name name) {
        return new CompanyRolePermission(name, null);
    }
}

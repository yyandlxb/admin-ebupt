/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.SearchRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SearchRecord extends TableImpl<SearchRecordRecord> {

    private static final long serialVersionUID = 1917640073;

    /**
     * The reference instance of <code>st.search_record</code>
     */
    public static final SearchRecord SEARCH_RECORD = new SearchRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SearchRecordRecord> getRecordType() {
        return SearchRecordRecord.class;
    }

    /**
     * The column <code>st.search_record.id</code>. 主键
     */
    public final TableField<SearchRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>st.search_record.content</code>. 搜索内容
     */
    public final TableField<SearchRecordRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(255), this, "搜索内容");

    /**
     * The column <code>st.search_record.create_time</code>. 创建时间
     */
    public final TableField<SearchRecordRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>st.search_record.user_id</code>. 用户id
     */
    public final TableField<SearchRecordRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "用户id");

    /**
     * The column <code>st.search_record.source</code>. 1、零担商户后台
     */
    public final TableField<SearchRecordRecord, Integer> SOURCE = createField("source", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "1、零担商户后台");

    /**
     * Create a <code>st.search_record</code> table reference
     */
    public SearchRecord() {
        this(DSL.name("search_record"), null);
    }

    /**
     * Create an aliased <code>st.search_record</code> table reference
     */
    public SearchRecord(String alias) {
        this(DSL.name(alias), SEARCH_RECORD);
    }

    /**
     * Create an aliased <code>st.search_record</code> table reference
     */
    public SearchRecord(Name alias) {
        this(alias, SEARCH_RECORD);
    }

    private SearchRecord(Name alias, Table<SearchRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private SearchRecord(Name alias, Table<SearchRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEARCH_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SearchRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SEARCH_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SearchRecordRecord> getPrimaryKey() {
        return Keys.KEY_SEARCH_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SearchRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<SearchRecordRecord>>asList(Keys.KEY_SEARCH_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SearchRecord as(String alias) {
        return new SearchRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SearchRecord as(Name alias) {
        return new SearchRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SearchRecord rename(String name) {
        return new SearchRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SearchRecord rename(Name name) {
        return new SearchRecord(name, null);
    }
}

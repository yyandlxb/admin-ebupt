/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.AppVersionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppVersion extends TableImpl<AppVersionRecord> {

    private static final long serialVersionUID = 1899687416;

    /**
     * The reference instance of <code>st.app_version</code>
     */
    public static final AppVersion APP_VERSION = new AppVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppVersionRecord> getRecordType() {
        return AppVersionRecord.class;
    }

    /**
     * The column <code>st.app_version.id</code>.
     */
    public final TableField<AppVersionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.app_version.platform</code>.
     */
    public final TableField<AppVersionRecord, Byte> PLATFORM = createField("platform", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>st.app_version.version</code>.
     */
    public final TableField<AppVersionRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>st.app_version.content</code>.
     */
    public final TableField<AppVersionRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>st.app_version.min_version</code>.
     */
    public final TableField<AppVersionRecord, String> MIN_VERSION = createField("min_version", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>st.app_version.url</code>.
     */
    public final TableField<AppVersionRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>st.app_version.created_at</code>.
     */
    public final TableField<AppVersionRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.app_version.updated_at</code>.
     */
    public final TableField<AppVersionRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>st.app_version</code> table reference
     */
    public AppVersion() {
        this(DSL.name("app_version"), null);
    }

    /**
     * Create an aliased <code>st.app_version</code> table reference
     */
    public AppVersion(String alias) {
        this(DSL.name(alias), APP_VERSION);
    }

    /**
     * Create an aliased <code>st.app_version</code> table reference
     */
    public AppVersion(Name alias) {
        this(alias, APP_VERSION);
    }

    private AppVersion(Name alias, Table<AppVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppVersion(Name alias, Table<AppVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_VERSION_PRIMARY, Indexes.APP_VERSION_UK_APP_VERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AppVersionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APP_VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AppVersionRecord> getPrimaryKey() {
        return Keys.KEY_APP_VERSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AppVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<AppVersionRecord>>asList(Keys.KEY_APP_VERSION_PRIMARY, Keys.KEY_APP_VERSION_UK_APP_VERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppVersion as(String alias) {
        return new AppVersion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppVersion as(Name alias) {
        return new AppVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppVersion rename(String name) {
        return new AppVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppVersion rename(Name name) {
        return new AppVersion(name, null);
    }
}

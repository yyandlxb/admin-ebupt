/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.BusinessTrainAccountRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 商户班列账户表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusinessTrainAccount extends TableImpl<BusinessTrainAccountRecord> {

    private static final long serialVersionUID = 586996661;

    /**
     * The reference instance of <code>st.business_train_account</code>
     */
    public static final BusinessTrainAccount BUSINESS_TRAIN_ACCOUNT = new BusinessTrainAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusinessTrainAccountRecord> getRecordType() {
        return BusinessTrainAccountRecord.class;
    }

    /**
     * The column <code>st.business_train_account.id</code>.
     */
    public final TableField<BusinessTrainAccountRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.business_train_account.business_id</code>.
     */
    public final TableField<BusinessTrainAccountRecord, Integer> BUSINESS_ID = createField("business_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>st.business_train_account.balance</code>. 账户余额
     */
    public final TableField<BusinessTrainAccountRecord, BigDecimal> BALANCE = createField("balance", org.jooq.impl.SQLDataType.DECIMAL(20, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "账户余额");

    /**
     * The column <code>st.business_train_account.enabled</code>.
     */
    public final TableField<BusinessTrainAccountRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>st.business_train_account.created_at</code>.
     */
    public final TableField<BusinessTrainAccountRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.business_train_account.updated_at</code>.
     */
    public final TableField<BusinessTrainAccountRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>st.business_train_account</code> table reference
     */
    public BusinessTrainAccount() {
        this(DSL.name("business_train_account"), null);
    }

    /**
     * Create an aliased <code>st.business_train_account</code> table reference
     */
    public BusinessTrainAccount(String alias) {
        this(DSL.name(alias), BUSINESS_TRAIN_ACCOUNT);
    }

    /**
     * Create an aliased <code>st.business_train_account</code> table reference
     */
    public BusinessTrainAccount(Name alias) {
        this(alias, BUSINESS_TRAIN_ACCOUNT);
    }

    private BusinessTrainAccount(Name alias, Table<BusinessTrainAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusinessTrainAccount(Name alias, Table<BusinessTrainAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "商户班列账户表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BUSINESS_TRAIN_ACCOUNT_PRIMARY, Indexes.BUSINESS_TRAIN_ACCOUNT_UK_BUSINESS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BusinessTrainAccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BUSINESS_TRAIN_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BusinessTrainAccountRecord> getPrimaryKey() {
        return Keys.KEY_BUSINESS_TRAIN_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BusinessTrainAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<BusinessTrainAccountRecord>>asList(Keys.KEY_BUSINESS_TRAIN_ACCOUNT_PRIMARY, Keys.KEY_BUSINESS_TRAIN_ACCOUNT_UK_BUSINESS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BusinessTrainAccount as(String alias) {
        return new BusinessTrainAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BusinessTrainAccount as(Name alias) {
        return new BusinessTrainAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusinessTrainAccount rename(String name) {
        return new BusinessTrainAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusinessTrainAccount rename(Name name) {
        return new BusinessTrainAccount(name, null);
    }
}

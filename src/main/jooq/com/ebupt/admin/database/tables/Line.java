/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.LineRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 线路
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Line extends TableImpl<LineRecord> {

    private static final long serialVersionUID = 1144215419;

    /**
     * The reference instance of <code>st.line</code>
     */
    public static final Line LINE = new Line();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LineRecord> getRecordType() {
        return LineRecord.class;
    }

    /**
     * The column <code>st.line.id</code>.
     */
    public final TableField<LineRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.line.code</code>.
     */
    public final TableField<LineRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>st.line.starting_point</code>. 起点
     */
    public final TableField<LineRecord, String> STARTING_POINT = createField("starting_point", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "起点");

    /**
     * The column <code>st.line.end_point</code>. 重点
     */
    public final TableField<LineRecord, String> END_POINT = createField("end_point", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "重点");

    /**
     * The column <code>st.line.exists_lobby</code>. 存在办票大厅
     */
    public final TableField<LineRecord, Boolean> EXISTS_LOBBY = createField("exists_lobby", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "存在办票大厅");

    /**
     * The column <code>st.line.lobby_address</code>. 办票大厅地址
     */
    public final TableField<LineRecord, String> LOBBY_ADDRESS = createField("lobby_address", org.jooq.impl.SQLDataType.VARCHAR(100), this, "办票大厅地址");

    /**
     * The column <code>st.line.lobby_phone_number</code>. 办票大厅电话
     */
    public final TableField<LineRecord, String> LOBBY_PHONE_NUMBER = createField("lobby_phone_number", org.jooq.impl.SQLDataType.VARCHAR(30), this, "办票大厅电话");

    /**
     * The column <code>st.line.storage_fee</code>. 是否收取保管费
     */
    public final TableField<LineRecord, Boolean> STORAGE_FEE = createField("storage_fee", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "是否收取保管费");

    /**
     * The column <code>st.line.type</code>. 线路模式
     */
    public final TableField<LineRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "线路模式");

    /**
     * The column <code>st.line.enabled</code>.
     */
    public final TableField<LineRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>st.line.fcl_line_id</code>. 对应干线线路
     */
    public final TableField<LineRecord, Integer> FCL_LINE_ID = createField("fcl_line_id", org.jooq.impl.SQLDataType.INTEGER, this, "对应干线线路");

    /**
     * The column <code>st.line.fcl_line_name</code>. 对应干线线路名称
     */
    public final TableField<LineRecord, String> FCL_LINE_NAME = createField("fcl_line_name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "对应干线线路名称");

    /**
     * The column <code>st.line.created_at</code>.
     */
    public final TableField<LineRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.line.updated_at</code>.
     */
    public final TableField<LineRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.line.open_train</code>. 是否开通班列
     */
    public final TableField<LineRecord, Boolean> OPEN_TRAIN = createField("open_train", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "是否开通班列");

    /**
     * Create a <code>st.line</code> table reference
     */
    public Line() {
        this(DSL.name("line"), null);
    }

    /**
     * Create an aliased <code>st.line</code> table reference
     */
    public Line(String alias) {
        this(DSL.name(alias), LINE);
    }

    /**
     * Create an aliased <code>st.line</code> table reference
     */
    public Line(Name alias) {
        this(alias, LINE);
    }

    private Line(Name alias, Table<LineRecord> aliased) {
        this(alias, aliased, null);
    }

    private Line(Name alias, Table<LineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "线路");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LINE_PRIMARY, Indexes.LINE_UK_LINE_CODE, Indexes.LINE_UK_LINE_START_END);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LineRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LineRecord> getPrimaryKey() {
        return Keys.KEY_LINE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LineRecord>> getKeys() {
        return Arrays.<UniqueKey<LineRecord>>asList(Keys.KEY_LINE_PRIMARY, Keys.KEY_LINE_UK_LINE_CODE, Keys.KEY_LINE_UK_LINE_START_END);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Line as(String alias) {
        return new Line(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Line as(Name alias) {
        return new Line(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Line rename(String name) {
        return new Line(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Line rename(Name name) {
        return new Line(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.TicketorRemarkRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketorRemark extends TableImpl<TicketorRemarkRecord> {

    private static final long serialVersionUID = -46141383;

    /**
     * The reference instance of <code>st.ticketor_remark</code>
     */
    public static final TicketorRemark TICKETOR_REMARK = new TicketorRemark();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketorRemarkRecord> getRecordType() {
        return TicketorRemarkRecord.class;
    }

    /**
     * The column <code>st.ticketor_remark.id</code>.
     */
    public final TableField<TicketorRemarkRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.ticketor_remark.create_time</code>. 创建时间
     */
    public final TableField<TicketorRemarkRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>st.ticketor_remark.hm_fee_change</code>. 提付运费修改
     */
    public final TableField<TicketorRemarkRecord, BigDecimal> HM_FEE_CHANGE = createField("hm_fee_change", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "提付运费修改");

    /**
     * The column <code>st.ticketor_remark.security_fee_change</code>. 合综服务费修改
     */
    public final TableField<TicketorRemarkRecord, BigDecimal> SECURITY_FEE_CHANGE = createField("security_fee_change", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "合综服务费修改");

    /**
     * The column <code>st.ticketor_remark.wx_pay_price_change</code>. 信微修改
     */
    public final TableField<TicketorRemarkRecord, BigDecimal> WX_PAY_PRICE_CHANGE = createField("wx_pay_price_change", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "信微修改");

    /**
     * The column <code>st.ticketor_remark.zfb_pay_price_change</code>. 付宝支修改
     */
    public final TableField<TicketorRemarkRecord, BigDecimal> ZFB_PAY_PRICE_CHANGE = createField("zfb_pay_price_change", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "付宝支修改");

    /**
     * The column <code>st.ticketor_remark.pos_pay_price_change</code>. pos修改
     */
    public final TableField<TicketorRemarkRecord, BigDecimal> POS_PAY_PRICE_CHANGE = createField("pos_pay_price_change", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "pos修改");

    /**
     * The column <code>st.ticketor_remark.cash_pay_price_change</code>. 金现修改
     */
    public final TableField<TicketorRemarkRecord, BigDecimal> CASH_PAY_PRICE_CHANGE = createField("cash_pay_price_change", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "金现修改");

    /**
     * The column <code>st.ticketor_remark.ticketor</code>. 办票员
     */
    public final TableField<TicketorRemarkRecord, String> TICKETOR = createField("ticketor", org.jooq.impl.SQLDataType.VARCHAR(20), this, "办票员");

    /**
     * The column <code>st.ticketor_remark.business_id</code>.
     */
    public final TableField<TicketorRemarkRecord, Integer> BUSINESS_ID = createField("business_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>st.ticketor_remark.line_code</code>.
     */
    public final TableField<TicketorRemarkRecord, String> LINE_CODE = createField("line_code", org.jooq.impl.SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>st.ticketor_remark.remark</code>. 注备
     */
    public final TableField<TicketorRemarkRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(255), this, "注备");

    /**
     * The column <code>st.ticketor_remark.status</code>. 0：有效   1：失效
     */
    public final TableField<TicketorRemarkRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0：有效   1：失效");

    /**
     * Create a <code>st.ticketor_remark</code> table reference
     */
    public TicketorRemark() {
        this(DSL.name("ticketor_remark"), null);
    }

    /**
     * Create an aliased <code>st.ticketor_remark</code> table reference
     */
    public TicketorRemark(String alias) {
        this(DSL.name(alias), TICKETOR_REMARK);
    }

    /**
     * Create an aliased <code>st.ticketor_remark</code> table reference
     */
    public TicketorRemark(Name alias) {
        this(alias, TICKETOR_REMARK);
    }

    private TicketorRemark(Name alias, Table<TicketorRemarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private TicketorRemark(Name alias, Table<TicketorRemarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TICKETOR_REMARK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TicketorRemarkRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TICKETOR_REMARK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TicketorRemarkRecord> getPrimaryKey() {
        return Keys.KEY_TICKETOR_REMARK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TicketorRemarkRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketorRemarkRecord>>asList(Keys.KEY_TICKETOR_REMARK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TicketorRemark as(String alias) {
        return new TicketorRemark(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TicketorRemark as(Name alias) {
        return new TicketorRemark(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketorRemark rename(String name) {
        return new TicketorRemark(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketorRemark rename(Name name) {
        return new TicketorRemark(name, null);
    }
}

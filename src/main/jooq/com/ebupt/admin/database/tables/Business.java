/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.BusinessRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Business extends TableImpl<BusinessRecord> {

    private static final long serialVersionUID = 525268147;

    /**
     * The reference instance of <code>st.business</code>
     */
    public static final Business BUSINESS = new Business();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusinessRecord> getRecordType() {
        return BusinessRecord.class;
    }

    /**
     * The column <code>st.business.id</code>.
     */
    public final TableField<BusinessRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.business.account</code>. 账号
     */
    public final TableField<BusinessRecord, String> ACCOUNT = createField("account", org.jooq.impl.SQLDataType.VARCHAR(255), this, "账号");

    /**
     * The column <code>st.business.name</code>. 头像
     */
    public final TableField<BusinessRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "头像");

    /**
     * The column <code>st.business.head_pic</code>.
     */
    public final TableField<BusinessRecord, String> HEAD_PIC = createField("head_pic", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.business.password</code>. 银行卡号
     */
    public final TableField<BusinessRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255), this, "银行卡号");

    /**
     * The column <code>st.business.lng</code>. 经度
     */
    public final TableField<BusinessRecord, Double> LNG = createField("lng", org.jooq.impl.SQLDataType.DOUBLE, this, "经度");

    /**
     * The column <code>st.business.lat</code>. 维度
     */
    public final TableField<BusinessRecord, Double> LAT = createField("lat", org.jooq.impl.SQLDataType.DOUBLE, this, "维度");

    /**
     * The column <code>st.business.bank_name</code>. 银行卡名称
     */
    public final TableField<BusinessRecord, String> BANK_NAME = createField("bank_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "银行卡名称");

    /**
     * The column <code>st.business.bank_no</code>.
     */
    public final TableField<BusinessRecord, String> BANK_NO = createField("bank_no", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.business.address</code>.
     */
    public final TableField<BusinessRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.business.status</code>. 0:正常 1：封号
     */
    public final TableField<BusinessRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(2).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "0:正常 1：封号");

    /**
     * The column <code>st.business.create_time</code>. 创建日期
     */
    public final TableField<BusinessRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建日期");

    /**
     * The column <code>st.business.update_time</code>. 修改日期
     */
    public final TableField<BusinessRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改日期");

    /**
     * The column <code>st.business.sign_time</code>. 签约日期
     */
    public final TableField<BusinessRecord, Timestamp> SIGN_TIME = createField("sign_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "签约日期");

    /**
     * The column <code>st.business.business_code</code>. 货运部编码
     */
    public final TableField<BusinessRecord, String> BUSINESS_CODE = createField("business_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "货运部编码");

    /**
     * The column <code>st.business.company_code</code>. 园区编码
     */
    public final TableField<BusinessRecord, String> COMPANY_CODE = createField("company_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "园区编码");

    /**
     * The column <code>st.business.company_id_back</code>.
     */
    public final TableField<BusinessRecord, Integer> COMPANY_ID_BACK = createField("company_id_back", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>st.business.company_name</code>. 物流公司名称
     */
    public final TableField<BusinessRecord, String> COMPANY_NAME = createField("company_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "物流公司名称");

    /**
     * The column <code>st.business.trans_num_rule</code>. 0规则 1自填  
     */
    public final TableField<BusinessRecord, Integer> TRANS_NUM_RULE = createField("trans_num_rule", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "0规则 1自填  ");

    /**
     * The column <code>st.business.deleted</code>. 删除标志位
     */
    public final TableField<BusinessRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志位");

    /**
     * The column <code>st.business.created_at</code>.
     */
    public final TableField<BusinessRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.business.updated_at</code>.
     */
    public final TableField<BusinessRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.business.collection_status</code>. 0:返还给托运部 1:返还给客户
     */
    public final TableField<BusinessRecord, Byte> COLLECTION_STATUS = createField("collection_status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0:返还给托运部 1:返还给客户");

    /**
     * The column <code>st.business.collection_status_time</code>. 返还给客户时间
     */
    public final TableField<BusinessRecord, Timestamp> COLLECTION_STATUS_TIME = createField("collection_status_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "返还给客户时间");

    /**
     * The column <code>st.business.company_id</code>.
     */
    public final TableField<BusinessRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>st.business</code> table reference
     */
    public Business() {
        this(DSL.name("business"), null);
    }

    /**
     * Create an aliased <code>st.business</code> table reference
     */
    public Business(String alias) {
        this(DSL.name(alias), BUSINESS);
    }

    /**
     * Create an aliased <code>st.business</code> table reference
     */
    public Business(Name alias) {
        this(alias, BUSINESS);
    }

    private Business(Name alias, Table<BusinessRecord> aliased) {
        this(alias, aliased, null);
    }

    private Business(Name alias, Table<BusinessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BUSINESS_IDX_NAME, Indexes.BUSINESS_PRIMARY, Indexes.BUSINESS_UK_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BusinessRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BUSINESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BusinessRecord> getPrimaryKey() {
        return Keys.KEY_BUSINESS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BusinessRecord>> getKeys() {
        return Arrays.<UniqueKey<BusinessRecord>>asList(Keys.KEY_BUSINESS_PRIMARY, Keys.KEY_BUSINESS_UK_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Business as(String alias) {
        return new Business(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Business as(Name alias) {
        return new Business(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Business rename(String name) {
        return new Business(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Business rename(Name name) {
        return new Business(name, null);
    }
}

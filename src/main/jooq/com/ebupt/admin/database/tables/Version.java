/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.VersionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 安卓版本表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Version extends TableImpl<VersionRecord> {

    private static final long serialVersionUID = -1651050775;

    /**
     * The reference instance of <code>st.version</code>
     */
    public static final Version VERSION = new Version();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VersionRecord> getRecordType() {
        return VersionRecord.class;
    }

    /**
     * The column <code>st.version.id</code>.
     */
    public final TableField<VersionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.version.channel_id</code>. 渠道号
     */
    public final TableField<VersionRecord, String> CHANNEL_ID = createField("channel_id", org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "渠道号");

    /**
     * The column <code>st.version.version_code</code>. 版本号
     */
    public final TableField<VersionRecord, Integer> VERSION_CODE = createField("version_code", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "版本号");

    /**
     * The column <code>st.version.version_name</code>. 版本名称
     */
    public final TableField<VersionRecord, String> VERSION_NAME = createField("version_name", org.jooq.impl.SQLDataType.VARCHAR(60).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "版本名称");

    /**
     * The column <code>st.version.update_state</code>. 更新标识 0:不更新1:更新 2:强制更新 
     */
    public final TableField<VersionRecord, Integer> UPDATE_STATE = createField("update_state", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "更新标识 0:不更新1:更新 2:强制更新 ");

    /**
     * The column <code>st.version.content</code>. 更新内容
     */
    public final TableField<VersionRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(2000).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "更新内容");

    /**
     * The column <code>st.version.app_url</code>. 下载地址 
     */
    public final TableField<VersionRecord, String> APP_URL = createField("app_url", org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "下载地址 ");

    /**
     * The column <code>st.version.upgrade_number</code>. 升级号
     */
    public final TableField<VersionRecord, Integer> UPGRADE_NUMBER = createField("upgrade_number", org.jooq.impl.SQLDataType.INTEGER, this, "升级号");

    /**
     * The column <code>st.version.update_time</code>. 更新时间
     */
    public final TableField<VersionRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * Create a <code>st.version</code> table reference
     */
    public Version() {
        this(DSL.name("version"), null);
    }

    /**
     * Create an aliased <code>st.version</code> table reference
     */
    public Version(String alias) {
        this(DSL.name(alias), VERSION);
    }

    /**
     * Create an aliased <code>st.version</code> table reference
     */
    public Version(Name alias) {
        this(alias, VERSION);
    }

    private Version(Name alias, Table<VersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Version(Name alias, Table<VersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "安卓版本表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VERSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VersionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VersionRecord> getPrimaryKey() {
        return Keys.KEY_VERSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VersionRecord>> getKeys() {
        return Arrays.<UniqueKey<VersionRecord>>asList(Keys.KEY_VERSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Version as(String alias) {
        return new Version(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Version as(Name alias) {
        return new Version(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Version rename(String name) {
        return new Version(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Version rename(Name name) {
        return new Version(name, null);
    }
}

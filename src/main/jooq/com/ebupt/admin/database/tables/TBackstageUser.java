/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.TBackstageUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 后台用户表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TBackstageUser extends TableImpl<TBackstageUserRecord> {

    private static final long serialVersionUID = 1767055962;

    /**
     * The reference instance of <code>st.t_backstage_user</code>
     */
    public static final TBackstageUser T_BACKSTAGE_USER = new TBackstageUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TBackstageUserRecord> getRecordType() {
        return TBackstageUserRecord.class;
    }

    /**
     * The column <code>st.t_backstage_user.id</code>.
     */
    public final TableField<TBackstageUserRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.t_backstage_user.mailbox</code>. 邮箱
     */
    public final TableField<TBackstageUserRecord, String> MAILBOX = createField("mailbox", org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "邮箱");

    /**
     * The column <code>st.t_backstage_user.name</code>. 用户名
     */
    public final TableField<TBackstageUserRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户名");

    /**
     * The column <code>st.t_backstage_user.password</code>. 密码
     */
    public final TableField<TBackstageUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "密码");

    /**
     * The column <code>st.t_backstage_user.jurisdiction</code>. 权限用户类型（1管理员，2运营，3普通）
     */
    public final TableField<TBackstageUserRecord, Integer> JURISDICTION = createField("jurisdiction", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "权限用户类型（1管理员，2运营，3普通）");

    /**
     * The column <code>st.t_backstage_user.phone</code>. 手机号
     */
    public final TableField<TBackstageUserRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.CHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "手机号");

    /**
     * The column <code>st.t_backstage_user.create_time</code>. 创建时间
     */
    public final TableField<TBackstageUserRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>st.t_backstage_user.update_time</code>. 更新时间
     */
    public final TableField<TBackstageUserRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>st.t_backstage_user.status</code>. 状态：1正常 2删除
     */
    public final TableField<TBackstageUserRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "状态：1正常 2删除");

    /**
     * The column <code>st.t_backstage_user.avatar</code>. 头像
     */
    public final TableField<TBackstageUserRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "头像");

    /**
     * Create a <code>st.t_backstage_user</code> table reference
     */
    public TBackstageUser() {
        this(DSL.name("t_backstage_user"), null);
    }

    /**
     * Create an aliased <code>st.t_backstage_user</code> table reference
     */
    public TBackstageUser(String alias) {
        this(DSL.name(alias), T_BACKSTAGE_USER);
    }

    /**
     * Create an aliased <code>st.t_backstage_user</code> table reference
     */
    public TBackstageUser(Name alias) {
        this(alias, T_BACKSTAGE_USER);
    }

    private TBackstageUser(Name alias, Table<TBackstageUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TBackstageUser(Name alias, Table<TBackstageUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "后台用户表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_BACKSTAGE_USER_INX_MAILBOX, Indexes.T_BACKSTAGE_USER_INX_PASSWORD, Indexes.T_BACKSTAGE_USER_INX_PHONE, Indexes.T_BACKSTAGE_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TBackstageUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_BACKSTAGE_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TBackstageUserRecord> getPrimaryKey() {
        return Keys.KEY_T_BACKSTAGE_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TBackstageUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TBackstageUserRecord>>asList(Keys.KEY_T_BACKSTAGE_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TBackstageUser as(String alias) {
        return new TBackstageUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TBackstageUser as(Name alias) {
        return new TBackstageUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TBackstageUser rename(String name) {
        return new TBackstageUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TBackstageUser rename(Name name) {
        return new TBackstageUser(name, null);
    }
}

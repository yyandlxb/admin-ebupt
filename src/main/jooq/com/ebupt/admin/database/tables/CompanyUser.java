/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.CompanyUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyUser extends TableImpl<CompanyUserRecord> {

    private static final long serialVersionUID = -724620909;

    /**
     * The reference instance of <code>st.company_user</code>
     */
    public static final CompanyUser COMPANY_USER = new CompanyUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyUserRecord> getRecordType() {
        return CompanyUserRecord.class;
    }

    /**
     * The column <code>st.company_user.id</code>.
     */
    public final TableField<CompanyUserRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.company_user.user_phone</code>. 商家电话
     */
    public final TableField<CompanyUserRecord, String> USER_PHONE = createField("user_phone", org.jooq.impl.SQLDataType.VARCHAR(255), this, "商家电话");

    /**
     * The column <code>st.company_user.user_name</code>. 名称
     */
    public final TableField<CompanyUserRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "名称");

    /**
     * The column <code>st.company_user.password</code>. 密码
     */
    public final TableField<CompanyUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255), this, "密码");

    /**
     * The column <code>st.company_user.company_id</code>. 物流公司ID
     */
    public final TableField<CompanyUserRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER, this, "物流公司ID");

    /**
     * The column <code>st.company_user.type</code>. 1，超级管理员，0，普通用户
     */
    public final TableField<CompanyUserRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "1，超级管理员，0，普通用户");

    /**
     * The column <code>st.company_user.enabled</code>. 是否存在标志位
     */
    public final TableField<CompanyUserRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "是否存在标志位");

    /**
     * The column <code>st.company_user.created_at</code>.
     */
    public final TableField<CompanyUserRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>st.company_user.updated_at</code>.
     */
    public final TableField<CompanyUserRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>st.company_user</code> table reference
     */
    public CompanyUser() {
        this(DSL.name("company_user"), null);
    }

    /**
     * Create an aliased <code>st.company_user</code> table reference
     */
    public CompanyUser(String alias) {
        this(DSL.name(alias), COMPANY_USER);
    }

    /**
     * Create an aliased <code>st.company_user</code> table reference
     */
    public CompanyUser(Name alias) {
        this(alias, COMPANY_USER);
    }

    private CompanyUser(Name alias, Table<CompanyUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyUser(Name alias, Table<CompanyUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_USER_PRIMARY, Indexes.COMPANY_USER_UK_USER_PHONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompanyUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompanyUserRecord> getPrimaryKey() {
        return Keys.KEY_COMPANY_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompanyUserRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyUserRecord>>asList(Keys.KEY_COMPANY_USER_PRIMARY, Keys.KEY_COMPANY_USER_UK_USER_PHONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyUser as(String alias) {
        return new CompanyUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyUser as(Name alias) {
        return new CompanyUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyUser rename(String name) {
        return new CompanyUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyUser rename(Name name) {
        return new CompanyUser(name, null);
    }
}

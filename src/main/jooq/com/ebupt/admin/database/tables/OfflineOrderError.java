/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.OfflineOrderErrorRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfflineOrderError extends TableImpl<OfflineOrderErrorRecord> {

    private static final long serialVersionUID = 1581066441;

    /**
     * The reference instance of <code>st.offline_order_error</code>
     */
    public static final OfflineOrderError OFFLINE_ORDER_ERROR = new OfflineOrderError();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfflineOrderErrorRecord> getRecordType() {
        return OfflineOrderErrorRecord.class;
    }

    /**
     * The column <code>st.offline_order_error.id</code>.
     */
    public final TableField<OfflineOrderErrorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.offline_order_error.error_info</code>. 异常信息
     */
    public final TableField<OfflineOrderErrorRecord, String> ERROR_INFO = createField("error_info", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "异常信息");

    /**
     * The column <code>st.offline_order_error.app_create_time</code>.
     */
    public final TableField<OfflineOrderErrorRecord, Timestamp> APP_CREATE_TIME = createField("app_create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>st.offline_order_error.server_create_time</code>.
     */
    public final TableField<OfflineOrderErrorRecord, Timestamp> SERVER_CREATE_TIME = createField("server_create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>st.offline_order_error.business_code</code>.
     */
    public final TableField<OfflineOrderErrorRecord, String> BUSINESS_CODE = createField("business_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.offline_order_error.pos_code</code>.
     */
    public final TableField<OfflineOrderErrorRecord, String> POS_CODE = createField("pos_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.offline_order_error.line_code</code>.
     */
    public final TableField<OfflineOrderErrorRecord, String> LINE_CODE = createField("line_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.offline_order_error.uuid</code>.
     */
    public final TableField<OfflineOrderErrorRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>st.offline_order_error</code> table reference
     */
    public OfflineOrderError() {
        this(DSL.name("offline_order_error"), null);
    }

    /**
     * Create an aliased <code>st.offline_order_error</code> table reference
     */
    public OfflineOrderError(String alias) {
        this(DSL.name(alias), OFFLINE_ORDER_ERROR);
    }

    /**
     * Create an aliased <code>st.offline_order_error</code> table reference
     */
    public OfflineOrderError(Name alias) {
        this(alias, OFFLINE_ORDER_ERROR);
    }

    private OfflineOrderError(Name alias, Table<OfflineOrderErrorRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfflineOrderError(Name alias, Table<OfflineOrderErrorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OFFLINE_ORDER_ERROR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OfflineOrderErrorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OFFLINE_ORDER_ERROR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OfflineOrderErrorRecord> getPrimaryKey() {
        return Keys.KEY_OFFLINE_ORDER_ERROR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OfflineOrderErrorRecord>> getKeys() {
        return Arrays.<UniqueKey<OfflineOrderErrorRecord>>asList(Keys.KEY_OFFLINE_ORDER_ERROR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OfflineOrderError as(String alias) {
        return new OfflineOrderError(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OfflineOrderError as(Name alias) {
        return new OfflineOrderError(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfflineOrderError rename(String name) {
        return new OfflineOrderError(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OfflineOrderError rename(Name name) {
        return new OfflineOrderError(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.BankCardRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankCard extends TableImpl<BankCardRecord> {

    private static final long serialVersionUID = 2060319708;

    /**
     * The reference instance of <code>st.bank_card</code>
     */
    public static final BankCard BANK_CARD = new BankCard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankCardRecord> getRecordType() {
        return BankCardRecord.class;
    }

    /**
     * The column <code>st.bank_card.id</code>.
     */
    public final TableField<BankCardRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.bank_card.business_id</code>.
     */
    public final TableField<BankCardRecord, Integer> BUSINESS_ID = createField("business_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>st.bank_card.bank_card_num</code>. 银行卡号
     */
    public final TableField<BankCardRecord, String> BANK_CARD_NUM = createField("bank_card_num", org.jooq.impl.SQLDataType.VARCHAR(255), this, "银行卡号");

    /**
     * The column <code>st.bank_card.bank_name</code>. 银行名称
     */
    public final TableField<BankCardRecord, String> BANK_NAME = createField("bank_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "银行名称");

    /**
     * The column <code>st.bank_card.opening_bank_name</code>. 开户行名称
     */
    public final TableField<BankCardRecord, String> OPENING_BANK_NAME = createField("opening_bank_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "开户行名称");

    /**
     * The column <code>st.bank_card.name</code>. 开户人姓名
     */
    public final TableField<BankCardRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "开户人姓名");

    /**
     * The column <code>st.bank_card.bank_status</code>. 银行卡类型：1，运费，2，垫付费，3，代收款
     */
    public final TableField<BankCardRecord, String> BANK_STATUS = createField("bank_status", org.jooq.impl.SQLDataType.VARCHAR(2), this, "银行卡类型：1，运费，2，垫付费，3，代收款");

    /**
     * The column <code>st.bank_card.status</code>. 0,启用，1停用
     */
    public final TableField<BankCardRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(2).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "0,启用，1停用");

    /**
     * The column <code>st.bank_card.business_name</code>. 托运部名称
     */
    public final TableField<BankCardRecord, String> BUSINESS_NAME = createField("business_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "托运部名称");

    /**
     * The column <code>st.bank_card.bank_percent</code>. 银行卡比例
     */
    public final TableField<BankCardRecord, BigDecimal> BANK_PERCENT = createField("bank_percent", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("100.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "银行卡比例");

    /**
     * Create a <code>st.bank_card</code> table reference
     */
    public BankCard() {
        this(DSL.name("bank_card"), null);
    }

    /**
     * Create an aliased <code>st.bank_card</code> table reference
     */
    public BankCard(String alias) {
        this(DSL.name(alias), BANK_CARD);
    }

    /**
     * Create an aliased <code>st.bank_card</code> table reference
     */
    public BankCard(Name alias) {
        this(alias, BANK_CARD);
    }

    private BankCard(Name alias, Table<BankCardRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankCard(Name alias, Table<BankCardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BANK_CARD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BankCardRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANK_CARD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankCardRecord> getPrimaryKey() {
        return Keys.KEY_BANK_CARD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankCardRecord>> getKeys() {
        return Arrays.<UniqueKey<BankCardRecord>>asList(Keys.KEY_BANK_CARD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankCard as(String alias) {
        return new BankCard(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankCard as(Name alias) {
        return new BankCard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankCard rename(String name) {
        return new BankCard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankCard rename(Name name) {
        return new BankCard(name, null);
    }
}

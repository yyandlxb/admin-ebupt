/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.OrderGoodsRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderGoods extends TableImpl<OrderGoodsRecord> {

    private static final long serialVersionUID = -56747103;

    /**
     * The reference instance of <code>st.order_goods</code>
     */
    public static final OrderGoods ORDER_GOODS = new OrderGoods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderGoodsRecord> getRecordType() {
        return OrderGoodsRecord.class;
    }

    /**
     * The column <code>st.order_goods.id</code>.
     */
    public final TableField<OrderGoodsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.order_goods.order_code</code>. 订单code
     */
    public final TableField<OrderGoodsRecord, String> ORDER_CODE = createField("order_code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "订单code");

    /**
     * The column <code>st.order_goods.goods_name</code>. 货物名称
     */
    public final TableField<OrderGoodsRecord, String> GOODS_NAME = createField("goods_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "货物名称");

    /**
     * The column <code>st.order_goods.goods_unit</code>. 单位
     */
    public final TableField<OrderGoodsRecord, String> GOODS_UNIT = createField("goods_unit", org.jooq.impl.SQLDataType.VARCHAR(255), this, "单位");

    /**
     * The column <code>st.order_goods.goods_number</code>. 数量
     */
    public final TableField<OrderGoodsRecord, String> GOODS_NUMBER = createField("goods_number", org.jooq.impl.SQLDataType.VARCHAR(255), this, "数量");

    /**
     * The column <code>st.order_goods.insure_price_amount</code>. 保价金额
     */
    public final TableField<OrderGoodsRecord, BigDecimal> INSURE_PRICE_AMOUNT = createField("insure_price_amount", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "保价金额");

    /**
     * The column <code>st.order_goods.insure_price_fee</code>. 保价费
     */
    public final TableField<OrderGoodsRecord, BigDecimal> INSURE_PRICE_FEE = createField("insure_price_fee", org.jooq.impl.SQLDataType.DECIMAL(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "保价费");

    /**
     * The column <code>st.order_goods.insurance_amount</code>. 保险金额
     */
    public final TableField<OrderGoodsRecord, BigDecimal> INSURANCE_AMOUNT = createField("insurance_amount", org.jooq.impl.SQLDataType.DECIMAL(20, 2), this, "保险金额");

    /**
     * The column <code>st.order_goods.insurance_fee</code>. 保险费
     */
    public final TableField<OrderGoodsRecord, BigDecimal> INSURANCE_FEE = createField("insurance_fee", org.jooq.impl.SQLDataType.DECIMAL(20, 2), this, "保险费");

    /**
     * The column <code>st.order_goods.forbid_goods</code>. 1 非禁止 2禁止
     */
    public final TableField<OrderGoodsRecord, String> FORBID_GOODS = createField("forbid_goods", org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "1 非禁止 2禁止");

    /**
     * The column <code>st.order_goods.valuable_goods</code>. 1 非贵重物品 2 贵重物品
     */
    public final TableField<OrderGoodsRecord, String> VALUABLE_GOODS = createField("valuable_goods", org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "1 非贵重物品 2 贵重物品");

    /**
     * The column <code>st.order_goods.check_goods</code>. 1 不查验 2查验
     */
    public final TableField<OrderGoodsRecord, String> CHECK_GOODS = createField("check_goods", org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "1 不查验 2查验");

    /**
     * The column <code>st.order_goods.update_time</code>.
     */
    public final TableField<OrderGoodsRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>st.order_goods.create_time</code>. 创建时间
     */
    public final TableField<OrderGoodsRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>st.order_goods.remark</code>. 备注
     */
    public final TableField<OrderGoodsRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(255), this, "备注");

    /**
     * The column <code>st.order_goods.effective</code>. 1 有效 2 无效
     */
    public final TableField<OrderGoodsRecord, String> EFFECTIVE = createField("effective", org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "1 有效 2 无效");

    /**
     * The column <code>st.order_goods.transportNum</code>. 运输号
     */
    public final TableField<OrderGoodsRecord, String> TRANSPORTNUM = createField("transportNum", org.jooq.impl.SQLDataType.VARCHAR(255), this, "运输号");

    /**
     * Create a <code>st.order_goods</code> table reference
     */
    public OrderGoods() {
        this(DSL.name("order_goods"), null);
    }

    /**
     * Create an aliased <code>st.order_goods</code> table reference
     */
    public OrderGoods(String alias) {
        this(DSL.name(alias), ORDER_GOODS);
    }

    /**
     * Create an aliased <code>st.order_goods</code> table reference
     */
    public OrderGoods(Name alias) {
        this(alias, ORDER_GOODS);
    }

    private OrderGoods(Name alias, Table<OrderGoodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderGoods(Name alias, Table<OrderGoodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_GOODS_ORDER_GOODS_ORDER_CODE, Indexes.ORDER_GOODS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrderGoodsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDER_GOODS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderGoodsRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_GOODS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderGoodsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderGoodsRecord>>asList(Keys.KEY_ORDER_GOODS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderGoods as(String alias) {
        return new OrderGoods(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderGoods as(Name alias) {
        return new OrderGoods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderGoods rename(String name) {
        return new OrderGoods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderGoods rename(Name name) {
        return new OrderGoods(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package com.ebupt.admin.database.tables;


import com.ebupt.admin.database.Indexes;
import com.ebupt.admin.database.Keys;
import com.ebupt.admin.database.St;
import com.ebupt.admin.database.tables.records.TicketorRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticketor extends TableImpl<TicketorRecord> {

    private static final long serialVersionUID = 34912530;

    /**
     * The reference instance of <code>st.ticketor</code>
     */
    public static final Ticketor TICKETOR = new Ticketor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketorRecord> getRecordType() {
        return TicketorRecord.class;
    }

    /**
     * The column <code>st.ticketor.id</code>.
     */
    public final TableField<TicketorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>st.ticketor.user_name</code>. 出票员姓名
     */
    public final TableField<TicketorRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "出票员姓名");

    /**
     * The column <code>st.ticketor.ticket_phone</code>. 出票员手机号
     */
    public final TableField<TicketorRecord, String> TICKET_PHONE = createField("ticket_phone", org.jooq.impl.SQLDataType.VARCHAR(255), this, "出票员手机号");

    /**
     * The column <code>st.ticketor.password</code>.
     */
    public final TableField<TicketorRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>st.ticketor.route_address</code>.
     */
    public final TableField<TicketorRecord, String> ROUTE_ADDRESS = createField("route_address", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>st.ticketor.create_time</code>. ´´½¨Ê±¼ä
     */
    public final TableField<TicketorRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "´´½¨Ê±¼ä");

    /**
     * The column <code>st.ticketor.flag</code>. 0：有效，1：无效
     */
    public final TableField<TicketorRecord, String> FLAG = createField("flag", org.jooq.impl.SQLDataType.VARCHAR(1), this, "0：有效，1：无效");

    /**
     * Create a <code>st.ticketor</code> table reference
     */
    public Ticketor() {
        this(DSL.name("ticketor"), null);
    }

    /**
     * Create an aliased <code>st.ticketor</code> table reference
     */
    public Ticketor(String alias) {
        this(DSL.name(alias), TICKETOR);
    }

    /**
     * Create an aliased <code>st.ticketor</code> table reference
     */
    public Ticketor(Name alias) {
        this(alias, TICKETOR);
    }

    private Ticketor(Name alias, Table<TicketorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticketor(Name alias, Table<TicketorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return St.ST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TICKETOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TicketorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TICKETOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TicketorRecord> getPrimaryKey() {
        return Keys.KEY_TICKETOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TicketorRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketorRecord>>asList(Keys.KEY_TICKETOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ticketor as(String alias) {
        return new Ticketor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ticketor as(Name alias) {
        return new Ticketor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticketor rename(String name) {
        return new Ticketor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticketor rename(Name name) {
        return new Ticketor(name, null);
    }
}
